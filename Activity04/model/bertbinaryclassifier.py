# -*- coding: utf-8 -*-
"""Bertbinaryclassifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ylGXjuaOIjopq8CwNwO1zsK6N3PtTfTm
"""

import pandas as pd

# Load the dataset (make sure the file path matches your uploaded file)
file_path = '/content/BenchmarkUddinSO-ConsoliatedAspectSentiment.xls'  # Adjust the file path as needed
data = pd.read_excel(file_path)

# Assuming the columns are named 'sent', 'ManualLabel', and 'code'
df = data[['sent', 'ManualLabel', 'codes']]

# Split the 'code' column into separate rows
df = df.drop('codes', axis=1).join(
    df['codes'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('codes')
)

# Sort the data by aspect
df_sorted = df.sort_values(by='codes')

# Filter for 'Usability' aspect
df_usability = df_sorted[df_sorted['codes'].str.contains('Usability', case=False)]

# Split the data into training and test sets
from sklearn.model_selection import train_test_split
train, test = train_test_split(df_usability, test_size=0.2, random_state=42)

from transformers import BertTokenizer, BertForSequenceClassification
from torch.utils.data import DataLoader, Dataset
import torch
from sklearn.metrics import accuracy_score, f1_score

# Initialize the BERT tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Prepare the dataset class
class ReviewDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Function to encode the text data
def encode_data(tokenizer, texts, labels, max_length=512):
    encodings = tokenizer(texts, truncation=True, padding=True, max_length=max_length)
    return ReviewDataset(encodings, labels)

# Assume train and test data are already loaded
train_texts = train['sent'].tolist()
train_labels = train['ManualLabel'].apply(lambda x: 1 if x == 'p' else 0).tolist()
train_dataset = encode_data(tokenizer, train_texts, train_labels)

# Encode the test data
test_texts = test['sent'].tolist()
test_labels = test['ManualLabel'].apply(lambda x: 1 if x == 'p' else 0).tolist()
test_dataset = encode_data(tokenizer, test_texts, test_labels)

# Initialize the BERT model for sequence classification
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)

# Training parameters and DataLoader
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model.to(device)
train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

# Define the training loop
optimizer = torch.optim.AdamW(model.parameters(), lr=5e-5)
for epoch in range(1):  # Reduced number of epochs to 2
    model.train()
    for batch in train_loader:
        optimizer.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        loss.backward()
        optimizer.step()
        print(f"Epoch {epoch}, Loss: {loss.item()}")

# Evaluation
model.eval()
predictions = []
actuals = []
with torch.no_grad():
    for batch in test_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)
        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predicted_labels = torch.argmax(logits, axis=1)
        predictions.extend(predicted_labels.cpu().numpy())
        actuals.extend(labels.cpu().numpy())

accuracy = accuracy_score(actuals, predictions)
f1 = f1_score(actuals, predictions)

print(f"Accuracy: {accuracy}")
print(f"F1 Score: {f1}")